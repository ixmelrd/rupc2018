#include<stdio.h>
#include<string.h>
#include"reactive.hpp"
#include"constraints.hpp"

#include <sys/types.h>
#include <unistd.h>
#include <fstream>
#include <iostream>
#include <cctype>
using namespace std;

//#define DEBUG
#define MAX_BUF 1000000
#define MAX_NUM 100000000

typedef unsigned int u32;
typedef int i32;

struct Random {
    u32 seed;
    Random(u32 s = 0) {
        if (s) seed = s;
        else seed = (u32)time(0) + getpid() + 99191919;
#ifdef DEBUG
        ofstream fs("seed.txt");
        fs << seed << endl;
        fs.close();
#endif
        for(int i = 0; i < 100; ++i) next();
    }
    u32 next() {
        static u32 x = 123456789, y = 362436069, z = 521288629, w = seed;
        u32 t = x ^ (x << 11);
        x = y; y = z; z = w; w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));
        return w;
    }
    i32 next(i32 l, i32 r) { return l + next() % (r - l + 1); }
    i32 next(int r) { return next() % r; }
    double nextDouble() { return next() * 0.00000000023283064365386962890625; }
    double nextDouble(double r) { return next() * 0.00000000023283064365386962890625 * r; }
};
Random rnd;

char buf[1000010];
int V,E;
int A[100010], B[100010]; // 辺(A[i],B[i])
int ta[100010],to[100010], nt[100010]; // たぶん隣接リスト
int di[100010]; // 次数

//末尾の改行全消し
void rm_ln(char *s){
    int l=strlen(s);
    while(s[l-1]=='\n'||s[l-1]=='\r')l--;
    s[l]=0;
}

//sから2つの整数を読み込む
//テストケースからの入力だからエラー処理しない
void read_two_int(char *s,int *a,int *b){
    int i,n=0;
    rm_ln(s);
    for(i=0;s[i]-' ';i++)n=n*10+s[i]-'0';
    *a=n;
    n=0;
    for(i++;s[i];i++)n=n*10+s[i]-'0';
    *b=n;
}

//クエリが正しいものか判定
// s=クエリ文字列 q=何番目のクエリか nにクエリの頂点番号
// 戻り値が0なら正しい
int parse_query(char *s, char *q, int *n){
    int i,l,m;
    l=strlen(s);
    if(l<5)return 1;
    for(i=0;i<l;i++){   
        if(s[i]==' '&&i!=3)return 2;
    }
    if(strncmp(s,"edg",3)&&
       strncmp(s,"lst",3)&&
       strncmp(s,"ans",3))return 3;
    for(i=4;i<l;i++){
        if(s[i]<'0'||'9'<s[i])return 4;
    }
    if(l>12)return 5;
    sscanf(s+4,"%d",&m);
    if(m>MAX_NUM)return 5;
    for(i=0;i<3;i++)q[i]=s[i];
    q[4]=0;
    *n=m;
    return 0;
}

// edg nに応答
int answer_edg_query(int n,char *a,char *b){
    if(n>=E)return 1;
    sprintf(a,"%d",A[n]);
    sprintf(b,"%d",B[n]);
    //?へ変換
    if(rnd.next(0,4))sprintf(a,"-1");
    if(rnd.next(0,4))sprintf(a,"-1");
    return 0;
}

// lsg nに応答
int answer_lst_query(int n,char *s){
    int i;
    int lst[MAX_V+10];
    int l=0;
    if(n < 0 || n >= V) return 1;
    for(i=ta[n];i+1;i=nt[i]){
        lst[l++] = rnd.next(0,4) ? -1 : to[i];
    }
    for(i = 1; i < n; ++i) swap(lst[i], lst[rnd.next(0,i-1)]);
    sprintf(s,"%d",di[n]);
    for(i = 0; i < l; ++i){
        char num[100];
        sprintf(num, " %d", lst[i]);
        strcat(s, num);
    }
    return 0;
}

void edg_query(int e){
    char res_a[20], res_b[20];
    if(answer_edg_query(e,res_a,res_b)){
        // 辺番号がおかしいのでWAを出して終了
#ifdef DEBUG
        printf("num over E(==%d)\n",E);
#endif
        puts("invalid edg query");
        reactive_end();
        exit(0);
    }
                
#ifdef DEBUG
    printf("server writes:[%s %s] for edg %d query\n",res_a,res_b,e);
#endif
    sprintf(buf,"%s %s\n",res_a,res_b);
    reactive_write(buf);
}

void lst_query(int n){
    static char res[1000010];
    if(answer_lst_query(n,res)){
        // 頂点番号がおかしいのでWAを出して終了
#ifdef DEBUG
        printf("num over V(==%d)\n",V);
#endif
        puts("invalid lst query");
        reactive_end();
        exit(0);
    }

#ifdef DEBUG
    printf("server writes:[%s] for lst %d query\n",res,n);
#endif
    sprintf(buf,"%s\n",res);
    reactive_write(buf);
}

// 正答なら0を返す
int ans_query(int n, int ans){
    if(n == ans){
        printf("AC\n");
        return 0;
    } else {
        printf("Wrong Answer\n");
        return 1;
    }
}

int main(int argc, char **argv){
    int i, qi;
    int ANS; // ジャッジの出力
    int ANS_tmp; // 参加者の出力
    int MAX_Q;

    reactive_start(argv[1]);

    // 入力ファイルから読み込み
    // 入力ファイルにはグラフがある
    fgets(buf,MAX_BUF,stdin);
    read_two_int(buf,&V,&E);
    for(i=0;i<E;i++){
        fgets(buf,MAX_BUF,stdin);
        read_two_int(buf,&A[i],&B[i]);
    }//読み込み完了

    //隣接リストを作っていく
    for(i=0;i<V;i++)ta[i]=-1;
    for(i=0;i<E;i++){
        di[A[i]]++;
        di[B[i]]++;
        nt[i]=ta[A[i]];
        to[i]=B[i];
        ta[A[i]]=i;
        nt[i+E]=ta[B[i]];
        to[i+E]=A[i];
        ta[B[i]]=i+E;
    }

    // 入力のチェック (握手補題)
    ANS = ANS_tmp = 0;
    for(i=0;i<V;i++) ANS+=di[i]*(di[i]-1);
    for(i=0;i<E;i++) ANS_tmp+=di[A[i]]+di[B[i]]-2;
    if(ANS!=ANS_tmp){
        printf("ERROR input FILE\n");
        reactive_end();
        exit(1);
    }

#ifdef DEBUG
    printf("answer of this case is %d\n",ANS);
#endif

    //N,Mをクライアントへ出力
#ifdef DEBUG
    printf("serever writes:[%d %d]\n",V,E);
#endif
    sprintf(buf,"%d %d\n",V,E);
    reactive_write(buf);

    MAX_Q=3*V; // ans以外のクエリ数の上限

    //クライアントからクエリ受け取り
    for(qi = 1; qi <= MAX_Q+1; ++qi){
        char query[5];
        int num, errorcode;

        strcpy(buf, reactive_read(MAX_BUF).c_str());
        rm_ln(buf);
#ifdef DEBUG
        printf("server read:[%s]\n",buf);
#endif

        // クエリの読み込み
        errorcode = parse_query(buf,query,&num);
        if(errorcode){
            // 違法なクエリなのでWAを出して終了
#ifdef DEBUG
            printf("querys format error\nerrorcode %d\n",errorcode);
            printf("1:query is too small\n");
            printf("2:query has invalid space\n");
            printf("3:query is not \"edg\",\"lst\",\"ans\"\n");
            printf("4:invalid number(not too big)\n");
            printf("5:too long number\n");
#endif
            printf("invalid query");
            reactive_end();
            exit(0);
        }

        //クエリ回数チェック
        if(qi > MAX_Q   && strncmp(query,"ans",3) != 0){
            printf("too many query");
            reactive_end();
            exit(0);
        }
        //ans含めてMAX_Q+1回投げられる
        if(qi > MAX_Q+1 && strncmp(query,"ans",3) == 0){
            printf("WA:too many query\n");
            reactive_end();
            exit(0);
        }

        // edgクエリ
        if(strncmp(query,"edg",3)==0) edg_query(num);
        // lstクエリ
        else if(strncmp(query,"lst",3)==0) lst_query(num);
        // ansクエリ
        else if(strncmp(query,"ans",3)==0){
            ans_query(num, ANS);
            break;
        }
        else {
            // ここまで来てしまったら異常終了
#ifdef DEBUG
            printf("JUDGE ERROR query\n");
#endif
            reactive_end();
            exit(1);
        }
    }

    // 正常終了
    reactive_end();
    return 0;
}
